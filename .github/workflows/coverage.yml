name: Code Coverage

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  COVERAGE_THRESHOLD: 80 # Minimum coverage percentage

permissions:
  contents: read
  pull-requests: write

jobs:
  coverage:
    name: Check Code Coverage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Need two commits for diff

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test -- --coverage --watch=false

      - name: Calculate coverage percentage
        id: coverage
        run: |
          if [ -f coverage/lcov.info ]; then
            # Extract coverage percentage from lcov.info
            COVERAGE=$(npx lcov-summary coverage/lcov.info | grep 'Lines' | awk '{print $2}' | sed 's/%//' || echo "0")
            echo "coverage=${COVERAGE}" >> $GITHUB_OUTPUT
            echo "Current coverage: ${COVERAGE}%"
          else
            echo "coverage=0" >> $GITHUB_OUTPUT
            echo "No coverage file found"
          fi

      - name: Check coverage threshold
        env:
          COVERAGE: ${{ steps.coverage.outputs.coverage }}
          THRESHOLD: ${{ env.COVERAGE_THRESHOLD }}
        run: |
          if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
            echo "❌ Coverage ${COVERAGE}% is below threshold ${THRESHOLD}%"
            exit 1
          else
            echo "✅ Coverage ${COVERAGE}% meets threshold ${THRESHOLD}%"
          fi

      - name: Generate coverage HTML report
        if: always()
        run: |
          if [ -f coverage/lcov.info ]; then
            npx genhtml coverage/lcov.info -o coverage/html || echo "genhtml not available"
          fi

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage/
          retention-days: 30

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-${{ github.event.repository.name }}
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const coverage = '${{ steps.coverage.outputs.coverage }}';
            const threshold = '${{ env.COVERAGE_THRESHOLD }}';

            const status = parseFloat(coverage) >= parseFloat(threshold) ? '✅' : '❌';

            let coverageSummary = 'Coverage details not available';

            // Try to read coverage summary if available
            if (fs.existsSync('coverage/lcov-report/index.html')) {
              coverageSummary = 'See coverage report in artifacts';
            }

            const body = `## ${status} Code Coverage Report

            **Overall Coverage:** ${coverage}%
            **Threshold:** ${threshold}%

            ${coverageSummary}

            [View full coverage report on Codecov](
            https://app.codecov.io/gh/${{ github.repository }}/pull/${{ github.event.pull_request.number }})
            `;

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: body
            });

      - name: Create coverage badge
        if: github.ref == 'refs/heads/main' && env.GIST_SECRET != ''
        uses: schneegans/dynamic-badges-action@v1.7.0
        env:
          GIST_SECRET: ${{ secrets.GIST_SECRET }}
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ secrets.COVERAGE_GIST_ID }}
          filename: coverage-badge.json
          label: coverage
          message: ${{ steps.coverage.outputs.coverage }}%
          color: green
