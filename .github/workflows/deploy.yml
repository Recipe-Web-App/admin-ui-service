name: Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - development
          - staging
          - production
      skip_tests:
        description: 'Skip tests'
        required: false
        type: boolean
        default: false

  push:
    branches:
      - develop # Auto-deploy to development

concurrency:
  group: deploy-${{ github.event.inputs.environment || 'development' }}
  cancel-in-progress: false

env:
  NODE_VERSION: '20'

permissions:
  contents: read
  deployments: write

jobs:
  determine-environment:
    name: Determine Target Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}

    steps:
      - name: Set environment
        id: set-env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            # Auto-deploy develop branch to development
            echo "environment=development" >> $GITHUB_OUTPUT
          fi

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: determine-environment
    if: github.event.inputs.skip_tests != 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run unit tests
        run: npm run test -- --coverage --watch=false

      - name: Run E2E tests
        run: npm run test:e2e

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [determine-environment, test]
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped')

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build SSR application
        run: npm run build:ssr

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: |
            dist/
            package.json
            package-lock.json
          retention-days: 30

  deploy:
    name: Deploy to ${{ needs.determine-environment.outputs.environment }}
    runs-on: ubuntu-latest
    needs: [determine-environment, build]
    environment:
      name: ${{ needs.determine-environment.outputs.environment }}
      # url: https://${{ needs.determine-environment.outputs.environment }}.admin.recipe-web-app.com

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: dist-files

      - name: Deploy to ${{ needs.determine-environment.outputs.environment }}
        run: |
          echo "üöÄ Deploying to ${{ needs.determine-environment.outputs.environment }} environment"
          echo "This step would typically:"
          echo "- Copy files to ${{ needs.determine-environment.outputs.environment }} server"
          echo "- Update CDN with static assets"
          echo "- Restart SSR server"
          echo "- Run health checks"
          echo "- Notify team of deployment"

      - name: Run smoke tests
        run: |
          echo "üß™ Running smoke tests on ${{ needs.determine-environment.outputs.environment }}"
          echo "Verify application is responding correctly"
          # Add actual smoke tests here
          # Example:
          # ENV="${{ needs.determine-environment.outputs.environment }}"
          # curl -f https://${ENV}.admin.recipe-web-app.com/health || exit 1

      - name: Notify deployment
        if: always()
        run: |
          STATUS="${{ job.status }}"
          ENV="${{ needs.determine-environment.outputs.environment }}"
          if [ "$STATUS" = "success" ]; then
            echo "‚úÖ Deployment to ${ENV} completed successfully"
          else
            echo "‚ùå Deployment to ${ENV} failed"
          fi
          echo "üì¶ Commit: ${{ github.sha }}"
          echo "üë§ Triggered by: ${{ github.actor }}"

  verify:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy]

    steps:
      - name: Verify deployment health
        run: |
          ENV="${{ needs.determine-environment.outputs.environment }}"
          echo "üè• Checking deployment health for ${ENV}"
          # Add actual health check here
          # Example:
          # HEALTH_URL="https://${ENV}.admin.recipe-web-app.com/api/health"
          # curl -f $HEALTH_URL || exit 1
          echo "‚úÖ Health check passed"

      - name: Post-deployment tasks
        run: |
          echo "üìã Running post-deployment tasks"
          echo "- Clearing caches"
          echo "- Warming up application"
          echo "- Sending notifications"

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [determine-environment, verify]
    if: failure() && needs.determine-environment.outputs.environment == 'production'

    steps:
      - name: Rollback deployment
        run: |
          echo "‚ö†Ô∏è Rolling back deployment to previous version"
          echo "This step would typically:"
          echo "- Restore previous version"
          echo "- Restart services"
          echo "- Verify rollback success"
          echo "- Notify team of rollback"
